<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dep</title>
    <link>https://carolynvs.github.io/depdocs/</link>
    <description>Recent content on dep</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://carolynvs.github.io/depdocs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>dep</title>
      <link>https://carolynvs.github.io/depdocs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://carolynvs.github.io/depdocs/</guid>
      <description>This is a prototype dependency management tool for Go. It requires Go 1.8 or newer to compile.
The dep project is the official experiment, but not yet the official tool. Check out the Roadmap for more on what this means!
Current status It is safe to use dep in production. That means two things:
 Any valid metadata file (Gopkg.toml and Gopkg.lock) will be readable and considered valid by any future version of dep.</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>https://carolynvs.github.io/depdocs/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://carolynvs.github.io/depdocs/setup/</guid>
      <description>Grab the latest binary from the releases page.
On macOS you can install or upgrade to the latest released version with Homebrew:
$ brew install dep $ brew upgrade dep  If you&amp;rsquo;re interested in hacking on dep, you can install via go get:
go get -u github.com/golang/dep/cmd/dep  To start managing dependencies using dep, run the following from your project&amp;rsquo;s root directory:
$ dep init  This does the following:</description>
    </item>
    
    <item>
      <title>Usage</title>
      <link>https://carolynvs.github.io/depdocs/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://carolynvs.github.io/depdocs/usage/</guid>
      <description>There is one main subcommand you will use: dep ensure. ensure first checks that Gopkg.lock is consistent with Gopkg.toml and the imports in your code. If any changes are detected, dep&amp;rsquo;s solver works out a new Gopkg.lock. Then, dep checks if the contents of vendor/ are what Gopkg.lock (the new one if applicable, else the existing one) says it should be, and rewrites vendor/ as needed to bring it into line.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://carolynvs.github.io/depdocs/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://carolynvs.github.io/depdocs/faq/</guid>
      <description>What is X? farts
Why did you do Y? kittens</description>
    </item>
    
  </channel>
</rss>